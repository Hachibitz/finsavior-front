{"ast":null,"code":"import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer } from '@angular/core';\nexport var CollapseDirective = function () {\n  function CollapseDirective(_el, _renderer) {\n    /** This event fires as soon as content collapses */\n    this.collapsed = new EventEmitter();\n    /** This event fires as soon as content becomes visible */\n    this.expanded = new EventEmitter();\n    // shown\n    this.isExpanded = true;\n    // hidden\n    this.isCollapsed = false;\n    // stale state\n    this.isCollapse = true;\n    // animation state\n    this.isCollapsing = false;\n    this._el = _el;\n    this._renderer = _renderer;\n  }\n  Object.defineProperty(CollapseDirective.prototype, \"collapse\", {\n    get: function () {\n      return this.isExpanded;\n    },\n    /** A flag indicating visibility of content (shown or hidden) */\n    set: function (value) {\n      this.isExpanded = value;\n      this.toggle();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** allows to manually toggle content visibility */\n  CollapseDirective.prototype.toggle = function () {\n    if (this.isExpanded) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n  /** allows to manually hide content */\n  CollapseDirective.prototype.hide = function () {\n    this.isCollapse = false;\n    this.isCollapsing = true;\n    this.isExpanded = false;\n    this.isCollapsed = true;\n    this.isCollapse = true;\n    this.isCollapsing = false;\n    this.display = 'none';\n    this.collapsed.emit(this);\n  };\n  /** allows to manually show collapsed content */\n  CollapseDirective.prototype.show = function () {\n    this.isCollapse = false;\n    this.isCollapsing = true;\n    this.isExpanded = true;\n    this.isCollapsed = false;\n    this.display = 'block';\n    // this.height = 'auto';\n    this.isCollapse = true;\n    this.isCollapsing = false;\n    this._renderer.setElementStyle(this._el.nativeElement, 'overflow', 'visible');\n    this._renderer.setElementStyle(this._el.nativeElement, 'height', 'auto');\n    this.expanded.emit(this);\n  };\n  CollapseDirective.decorators = [{\n    type: Directive,\n    args: [{\n      selector: '[collapse]',\n      exportAs: 'bs-collapse',\n      /* tslint:disable-next-line */\n      host: {\n        '[class.collapse]': 'true'\n      } /*,\n        animations: [\n        trigger('active', [\n        state('void', style({height: 0})),\n        state('closed', style({height: 0})),\n        state('open', style({height: '*'})),\n        transition('void => closed', [animate(0)]),\n        transition('closed => open', [animate('350ms ease-out')]),\n        transition('open => closed', [animate('350ms ease-out')])\n        ])\n        ]*/\n    }]\n  }];\n  /** @nocollapse */\n  CollapseDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: Renderer\n    }];\n  };\n  CollapseDirective.propDecorators = {\n    'collapsed': [{\n      type: Output\n    }],\n    'expanded': [{\n      type: Output\n    }],\n    'display': [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    'isExpanded': [{\n      type: HostBinding,\n      args: ['class.in']\n    }, {\n      type: HostBinding,\n      args: ['class.show']\n    }, {\n      type: HostBinding,\n      args: ['attr.aria-expanded']\n    }],\n    'isCollapsed': [{\n      type: HostBinding,\n      args: ['attr.aria-hidden']\n    }],\n    'isCollapse': [{\n      type: HostBinding,\n      args: ['class.collapse']\n    }],\n    'isCollapsing': [{\n      type: HostBinding,\n      args: ['class.collapsing']\n    }],\n    'collapse': [{\n      type: Input\n    }]\n  };\n  return CollapseDirective;\n}();\n//# sourceMappingURL=collapse.directive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}