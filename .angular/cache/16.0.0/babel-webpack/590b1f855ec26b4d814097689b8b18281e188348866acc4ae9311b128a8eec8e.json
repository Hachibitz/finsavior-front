{"ast":null,"code":"import { TemplateRef, EventEmitter, ReflectiveInjector } from '@angular/core';\nimport { ContentRef } from './content-ref.class';\nimport { listenToTriggers } from '../utils/triggers';\nexport var ComponentLoader = function () {\n  /**\n   * Do not use this directly, it should be instanced via\n   * `ComponentLoadFactory.attach`\n   * @internal\n   * @param _viewContainerRef\n   * @param _elementRef\n   * @param _injector\n   * @param _renderer\n   * @param _componentFactoryResolver\n   * @param _ngZone\n   * @param _posService\n   */\n  // tslint:disable-next-line\n  function ComponentLoader(_viewContainerRef, _renderer, _elementRef, _injector, _componentFactoryResolver, _ngZone, _posService) {\n    this.onBeforeShow = new EventEmitter();\n    this.onShown = new EventEmitter();\n    this.onBeforeHide = new EventEmitter();\n    this.onHidden = new EventEmitter();\n    this._providers = [];\n    this._ngZone = _ngZone;\n    this._injector = _injector;\n    this._renderer = _renderer;\n    this._elementRef = _elementRef;\n    this._posService = _posService;\n    this._viewContainerRef = _viewContainerRef;\n    this._componentFactoryResolver = _componentFactoryResolver;\n  }\n  Object.defineProperty(ComponentLoader.prototype, \"isShown\", {\n    get: function () {\n      return !!this._componentRef;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  ComponentLoader.prototype.attach = function (compType) {\n    this._componentFactory = this._componentFactoryResolver.resolveComponentFactory(compType);\n    return this;\n  };\n  // todo: add behaviour: to target element, `body`, custom element\n  ComponentLoader.prototype.to = function (container) {\n    this.container = container || this.container;\n    return this;\n  };\n  ComponentLoader.prototype.position = function (opts) {\n    this.attachment = opts.attachment || this.attachment;\n    this._elementRef = opts.target || this._elementRef;\n    return this;\n  };\n  ComponentLoader.prototype.provide = function (provider) {\n    this._providers.push(provider);\n    return this;\n  };\n  ComponentLoader.prototype.show = function (opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    this._subscribePositioning();\n    if (!this._componentRef) {\n      this.onBeforeShow.emit();\n      this._contentRef = this._getContentRef(opts.content);\n      var injector = ReflectiveInjector.resolveAndCreate(this._providers, this._injector);\n      this._componentRef = this._viewContainerRef.createComponent(this._componentFactory, 0, injector, this._contentRef.nodes);\n      this.instance = this._componentRef.instance;\n      Object.assign(this._componentRef.instance, opts);\n      if (this.container === 'body' && typeof document !== 'undefined') {\n        document.querySelector(this.container).appendChild(this._componentRef.location.nativeElement);\n      }\n      // we need to manually invoke change detection since events registered\n      // via\n      // Renderer::listen() are not picked up by change detection with the\n      // OnPush strategy\n      this._componentRef.changeDetectorRef.markForCheck();\n      this.onShown.emit(this._componentRef.instance);\n    }\n    return this._componentRef;\n  };\n  ComponentLoader.prototype.hide = function () {\n    if (this._componentRef) {\n      this.onBeforeHide.emit(this._componentRef.instance);\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._componentRef.hostView));\n      this._componentRef = null;\n      if (this._contentRef.viewRef) {\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\n        this._contentRef = null;\n      }\n      this._componentRef = null;\n      this.onHidden.emit();\n    }\n    return this;\n  };\n  ComponentLoader.prototype.toggle = function () {\n    if (this.isShown) {\n      this.hide();\n      return;\n    }\n    this.show();\n  };\n  ComponentLoader.prototype.dispose = function () {\n    if (this.isShown) {\n      this.hide();\n    }\n    this._unsubscribePositioning();\n    if (this._unregisterListenersFn) {\n      this._unregisterListenersFn();\n    }\n  };\n  ComponentLoader.prototype.listen = function (listenOpts) {\n    var _this = this;\n    this.triggers = listenOpts.triggers || this.triggers;\n    listenOpts.target = listenOpts.target || this._elementRef;\n    listenOpts.show = listenOpts.show || function () {\n      return _this.show();\n    };\n    listenOpts.hide = listenOpts.hide || function () {\n      return _this.hide();\n    };\n    listenOpts.toggle = listenOpts.toggle || function () {\n      return _this.isShown ? listenOpts.hide() : listenOpts.show();\n    };\n    this._unregisterListenersFn = listenToTriggers(this._renderer, listenOpts.target.nativeElement, this.triggers, listenOpts.show, listenOpts.hide, listenOpts.toggle);\n    return this;\n  };\n  ComponentLoader.prototype._subscribePositioning = function () {\n    var _this = this;\n    if (this._zoneSubscription || !this.attachment) {\n      return;\n    }\n    this._zoneSubscription = this._ngZone.onStable.subscribe(function () {\n      if (!_this._componentRef) {\n        return;\n      }\n      _this._posService.position({\n        element: _this._componentRef.location,\n        target: _this._elementRef,\n        attachment: _this.attachment,\n        appendToBody: _this.container === 'body'\n      });\n    });\n  };\n  ComponentLoader.prototype._unsubscribePositioning = function () {\n    if (!this._zoneSubscription) {\n      return;\n    }\n    this._zoneSubscription.unsubscribe();\n    this._zoneSubscription = null;\n  };\n  ComponentLoader.prototype._getContentRef = function (content) {\n    if (!content) {\n      return new ContentRef([]);\n    }\n    if (content instanceof TemplateRef) {\n      var viewRef = this._viewContainerRef.createEmbeddedView(content);\n      return new ContentRef([viewRef.rootNodes], viewRef);\n    }\n    return new ContentRef([[this._renderer.createText(null, \"\" + content)]]);\n  };\n  return ComponentLoader;\n}();\n//# sourceMappingURL=component-loader.class.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}