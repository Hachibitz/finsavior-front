{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { AlertConfig } from './alert.config';\nimport { OnChange } from '../utils/decorators';\nexport var AlertComponent = function () {\n  function AlertComponent(_config) {\n    var _this = this;\n    /** Alert type. Provides one of four bootstrap supported contextual classes: `success`, `info`, `warning` and `danger` */\n    this.type = 'warning';\n    /** If set, displays an inline \"Close\" button */\n    this.dismissible = false;\n    /** This event fires immediately after close instance method is called, $event is an instance of Alert component. */\n    this.onClose = new EventEmitter();\n    /** This event fires when alert closed, $event is an instance of Alert component */\n    this.onClosed = new EventEmitter();\n    this.isClosed = false;\n    this.classes = '';\n    this.dismissibleChange = new EventEmitter();\n    Object.assign(this, _config);\n    this.dismissibleChange.subscribe(function (dismissible) {\n      _this.classes = _this.dismissible ? 'alert-dismissible' : '';\n    });\n  }\n  AlertComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    if (this.dismissOnTimeout) {\n      // if dismissOnTimeout used as attr without binding, it will be a string\n      setTimeout(function () {\n        return _this.close();\n      }, parseInt(this.dismissOnTimeout, 10));\n    }\n  };\n  // todo: animation ` If the .fade and .in classes are present on the element,\n  // the alert will fade out before it is removed`\n  /**\n   * Closes an alert by removing it from the DOM.\n   */\n  AlertComponent.prototype.close = function () {\n    if (this.isClosed) {\n      return;\n    }\n    this.onClose.emit(this);\n    this.isClosed = true;\n    this.onClosed.emit(this);\n  };\n  AlertComponent.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'alert,ngx-alert',\n      template: \"\\n<template [ngIf]=\\\"!isClosed\\\">\\n  <div [class]=\\\"'alert alert-' + type\\\" role=\\\"alert\\\" [ngClass]=\\\"classes\\\">\\n    <template [ngIf]=\\\"dismissible\\\">\\n      <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"close()\\\">\\n        <span aria-hidden=\\\"true\\\">&times;</span>\\n        <span class=\\\"sr-only\\\">Close</span>\\n      </button>\\n    </template>\\n    <ng-content></ng-content>\\n  </div>\\n</template>\\n  \"\n    }]\n  }];\n  /** @nocollapse */\n  AlertComponent.ctorParameters = function () {\n    return [{\n      type: AlertConfig\n    }];\n  };\n  AlertComponent.propDecorators = {\n    'type': [{\n      type: Input\n    }],\n    'dismissible': [{\n      type: Input\n    }],\n    'dismissOnTimeout': [{\n      type: Input\n    }],\n    'onClose': [{\n      type: Output\n    }],\n    'onClosed': [{\n      type: Output\n    }]\n  };\n  __decorate([OnChange(), __metadata('design:type', Boolean)], AlertComponent.prototype, \"dismissible\", void 0);\n  return AlertComponent;\n}();\n//# sourceMappingURL=alert.component.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}