{"ast":null,"code":"import { Component, Input, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TimepickerConfig } from './timepicker.config';\nexport var TIMEPICKER_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return TimepickerComponent;\n  }),\n  multi: true\n};\n// todo: refactor directive has to many functions! (extract to stateless helper)\n// todo: use moment js?\n// todo: implement `time` validator\n// todo: replace increment/decrement blockers with getters, or extract\n// todo: unify work with selected\nfunction isDefined(value) {\n  return typeof value !== 'undefined';\n}\nfunction addMinutes(date, minutes) {\n  var dt = new Date(date.getTime() + minutes * 60000);\n  var newDate = new Date(date);\n  newDate.setHours(dt.getHours(), dt.getMinutes());\n  return newDate;\n}\nexport var TimepickerComponent = function () {\n  function TimepickerComponent(_config) {\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n    // result value\n    this._selected = new Date();\n    this.config = _config;\n    Object.assign(this, _config);\n  }\n  Object.defineProperty(TimepickerComponent.prototype, \"showMeridian\", {\n    /** if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM */\n    get: function () {\n      return this._showMeridian;\n    },\n    set: function (value) {\n      this._showMeridian = value;\n      // || !this.$error.time\n      // if (true) {\n      this.updateTemplate();\n      return;\n      // }\n      // Evaluate from template\n      /*let hours = this.getHoursFromTemplate();\n       let minutes = this.getMinutesFromTemplate();\n       if (isDefined(hours) && isDefined(minutes)) {\n       this.selected.setHours(hours);\n       this.refresh();\n       }*/\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TimepickerComponent.prototype, \"selected\", {\n    get: function () {\n      return this._selected;\n    },\n    set: function (v) {\n      if (v) {\n        this._selected = v;\n        this.updateTemplate();\n        this.onChange(this.selected);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  // todo: add formatter value to Date object\n  TimepickerComponent.prototype.ngOnInit = function () {\n    // todo: take in account $locale.DATETIME_FORMATS.AMPMS;\n    if (this.mousewheel) {}\n    if (this.arrowkeys) {}\n    // this.setupInputEvents();\n  };\n\n  TimepickerComponent.prototype.writeValue = function (v) {\n    if (v === this.selected) {\n      return;\n    }\n    if (v && v instanceof Date) {\n      this.selected = v;\n      return;\n    }\n    this.selected = v ? new Date(v) : void 0;\n  };\n  TimepickerComponent.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n  TimepickerComponent.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n  TimepickerComponent.prototype.setDisabledState = function (isDisabled) {\n    this.readonlyInput = isDisabled;\n  };\n  TimepickerComponent.prototype.updateHours = function () {\n    if (this.readonlyInput) {\n      return;\n    }\n    var hours = this.getHoursFromTemplate();\n    var minutes = this.getMinutesFromTemplate();\n    this.invalidHours = !isDefined(hours);\n    this.invalidMinutes = !isDefined(minutes);\n    if (this.invalidHours || this.invalidMinutes) {\n      // TODO: needed a validation functionality.\n      return;\n    }\n    this.selected.setHours(hours);\n    this.invalidHours = this.selected < this.min || this.selected > this.max;\n    if (this.invalidHours) {\n      // todo: validation?\n      // invalidate(true);\n      return;\n    } else {\n      this.refresh();\n    }\n  };\n  TimepickerComponent.prototype.hoursOnBlur = function () {\n    if (this.readonlyInput) {\n      return;\n    }\n    // todo: binded with validation\n    if (!this.invalidHours && parseInt(this.hours, 10) < 10) {\n      this.hours = this.pad(this.hours);\n    }\n  };\n  TimepickerComponent.prototype.updateMinutes = function () {\n    if (this.readonlyInput) {\n      return;\n    }\n    var minutes = this.getMinutesFromTemplate();\n    var hours = this.getHoursFromTemplate();\n    this.invalidMinutes = !isDefined(minutes);\n    this.invalidHours = !isDefined(hours);\n    if (this.invalidMinutes || this.invalidHours) {\n      // TODO: needed a validation functionality.\n      return;\n    }\n    this.selected.setMinutes(minutes);\n    this.invalidMinutes = this.selected < this.min || this.selected > this.max;\n    if (this.invalidMinutes) {\n      // todo: validation\n      // invalidate(undefined, true);\n      return;\n    } else {\n      this.refresh();\n    }\n  };\n  TimepickerComponent.prototype.minutesOnBlur = function () {\n    if (this.readonlyInput) {\n      return;\n    }\n    if (!this.invalidMinutes && parseInt(this.minutes, 10) < 10) {\n      this.minutes = this.pad(this.minutes);\n    }\n  };\n  TimepickerComponent.prototype.incrementHours = function () {\n    if (!this.noIncrementHours()) {\n      this.addMinutesToSelected(this.hourStep * 60);\n    }\n  };\n  TimepickerComponent.prototype.decrementHours = function () {\n    if (!this.noDecrementHours()) {\n      this.addMinutesToSelected(-this.hourStep * 60);\n    }\n  };\n  TimepickerComponent.prototype.incrementMinutes = function () {\n    if (!this.noIncrementMinutes()) {\n      this.addMinutesToSelected(this.minuteStep);\n    }\n  };\n  TimepickerComponent.prototype.decrementMinutes = function () {\n    if (!this.noDecrementMinutes()) {\n      this.addMinutesToSelected(-this.minuteStep);\n    }\n  };\n  TimepickerComponent.prototype.noIncrementHours = function () {\n    var incrementedSelected = addMinutes(this.selected, this.hourStep * 60);\n    return incrementedSelected > this.max || incrementedSelected < this.selected && incrementedSelected < this.min;\n  };\n  TimepickerComponent.prototype.noDecrementHours = function () {\n    var decrementedSelected = addMinutes(this.selected, -this.hourStep * 60);\n    return decrementedSelected < this.min || decrementedSelected > this.selected && decrementedSelected > this.max;\n  };\n  TimepickerComponent.prototype.noIncrementMinutes = function () {\n    var incrementedSelected = addMinutes(this.selected, this.minuteStep);\n    return incrementedSelected > this.max || incrementedSelected < this.selected && incrementedSelected < this.min;\n  };\n  TimepickerComponent.prototype.noDecrementMinutes = function () {\n    var decrementedSelected = addMinutes(this.selected, -this.minuteStep);\n    return decrementedSelected < this.min || decrementedSelected > this.selected && decrementedSelected > this.max;\n  };\n  TimepickerComponent.prototype.toggleMeridian = function () {\n    if (!this.noToggleMeridian()) {\n      var sign = this.selected.getHours() < 12 ? 1 : -1;\n      this.addMinutesToSelected(12 * 60 * sign);\n    }\n  };\n  TimepickerComponent.prototype.noToggleMeridian = function () {\n    if (this.readonlyInput) {\n      return true;\n    }\n    if (this.selected.getHours() < 13) {\n      return addMinutes(this.selected, 12 * 60) > this.max;\n    } else {\n      return addMinutes(this.selected, -12 * 60) < this.min;\n    }\n  };\n  TimepickerComponent.prototype.refresh = function () {\n    // this.makeValid();\n    this.updateTemplate();\n    this.onChange(this.selected);\n  };\n  TimepickerComponent.prototype.updateTemplate = function () {\n    var hours = this.selected.getHours();\n    var minutes = this.selected.getMinutes();\n    if (this.showMeridian) {\n      // Convert 24 to 12 hour system\n      hours = hours === 0 || hours === 12 ? 12 : hours % 12;\n    }\n    // this.hours = keyboardChange === 'h' ? hours : this.pad(hours);\n    // if (keyboardChange !== 'm') {\n    //  this.minutes = this.pad(minutes);\n    // }\n    this.hours = this.pad(hours);\n    this.minutes = this.pad(minutes);\n    if (!this.meridians) {\n      this.meridians = this.config.meridians;\n    }\n    this.meridian = this.selected.getHours() < 12 ? this.meridians[0] : this.meridians[1];\n  };\n  TimepickerComponent.prototype.getHoursFromTemplate = function () {\n    var hours = parseInt(this.hours, 10);\n    var valid = this.showMeridian ? hours > 0 && hours < 13 : hours >= 0 && hours < 24;\n    if (!valid) {\n      return void 0;\n    }\n    if (this.showMeridian) {\n      if (hours === 12) {\n        hours = 0;\n      }\n      if (this.meridian === this.meridians[1]) {\n        hours = hours + 12;\n      }\n    }\n    return hours;\n  };\n  TimepickerComponent.prototype.getMinutesFromTemplate = function () {\n    var minutes = parseInt(this.minutes, 10);\n    return minutes >= 0 && minutes < 60 ? minutes : undefined;\n  };\n  TimepickerComponent.prototype.pad = function (value) {\n    return isDefined(value) && value.toString().length < 2 ? '0' + value : value.toString();\n  };\n  TimepickerComponent.prototype.addMinutesToSelected = function (minutes) {\n    this.selected = addMinutes(this.selected, minutes);\n    this.refresh();\n  };\n  TimepickerComponent.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'timepicker',\n      template: \"\\n    <table>\\n      <tbody>\\n        <tr class=\\\"text-center\\\" [ngClass]=\\\"{hidden: !showSpinners || readonlyInput}\\\">\\n          <td><a (click)=\\\"incrementHours()\\\" [ngClass]=\\\"{disabled: noIncrementHours()}\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-up\\\"></span></a></td>\\n          <td>&nbsp;</td>\\n          <td><a (click)=\\\"incrementMinutes()\\\" [ngClass]=\\\"{disabled: noIncrementMinutes()}\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-up\\\"></span></a></td>\\n          <td [ngClass]=\\\"{hidden: !showMeridian}\\\" *ngIf=\\\"showMeridian\\\"></td>\\n        </tr>\\n        <tr>\\n          <td class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': invalidHours}\\\">\\n            <input style=\\\"width:50px;\\\" type=\\\"text\\\" [(ngModel)]=\\\"hours\\\" (change)=\\\"updateHours()\\\" class=\\\"form-control text-center\\\" [readonly]=\\\"readonlyInput\\\" (blur)=\\\"hoursOnBlur()\\\" maxlength=\\\"2\\\">\\n          </td>\\n          <td>:</td>\\n          <td class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': invalidMinutes}\\\">\\n            <input style=\\\"width:50px;\\\" type=\\\"text\\\" [(ngModel)]=\\\"minutes\\\" (change)=\\\"updateMinutes()\\\" class=\\\"form-control text-center\\\" [readonly]=\\\"readonlyInput\\\" (blur)=\\\"minutesOnBlur()\\\" maxlength=\\\"2\\\">\\n          </td>\\n          <td [ngClass]=\\\"{hidden: !showMeridian}\\\" *ngIf=\\\"showMeridian\\\"><button type=\\\"button\\\" [ngClass]=\\\"{disabled: noToggleMeridian() || readonlyInput}\\\" class=\\\"btn btn-default text-center\\\" (click)=\\\"toggleMeridian()\\\">{{meridian}}</button></td>\\n        </tr>\\n        <tr class=\\\"text-center\\\" [ngClass]=\\\"{hidden: !showSpinners || readonlyInput}\\\">\\n          <td><a (click)=\\\"decrementHours()\\\" [ngClass]=\\\"{disabled: noDecrementHours()}\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-down\\\"></span></a></td>\\n          <td>&nbsp;</td>\\n          <td><a (click)=\\\"decrementMinutes()\\\" [ngClass]=\\\"{disabled: noDecrementMinutes()}\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-down\\\"></span></a></td>\\n          <td [ngClass]=\\\"{hidden: !showMeridian}\\\" *ngIf=\\\"showMeridian\\\"></td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  \",\n      providers: [TIMEPICKER_CONTROL_VALUE_ACCESSOR]\n    }]\n  }];\n  /** @nocollapse */\n  TimepickerComponent.ctorParameters = function () {\n    return [{\n      type: TimepickerConfig\n    }];\n  };\n  TimepickerComponent.propDecorators = {\n    'hourStep': [{\n      type: Input\n    }],\n    'minuteStep': [{\n      type: Input\n    }],\n    'readonlyInput': [{\n      type: Input\n    }],\n    'mousewheel': [{\n      type: Input\n    }],\n    'arrowkeys': [{\n      type: Input\n    }],\n    'showSpinners': [{\n      type: Input\n    }],\n    'min': [{\n      type: Input\n    }],\n    'max': [{\n      type: Input\n    }],\n    'meridians': [{\n      type: Input\n    }],\n    'showMeridian': [{\n      type: Input\n    }]\n  };\n  return TimepickerComponent;\n}();\n//# sourceMappingURL=timepicker.component.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}