{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive, Input, ViewContainerRef, Output, EventEmitter, Renderer, ElementRef } from '@angular/core';\nimport { TooltipContainerComponent } from './tooltip-container.component';\nimport { TooltipConfig } from './tooltip.config';\nimport { ComponentLoaderFactory } from '../component-loader';\nimport { OnChange } from '../utils/decorators';\nexport var TooltipDirective = function () {\n  // tslint:disable-next-line\n  function TooltipDirective(_viewContainerRef, _renderer, _elementRef, cis, config) {\n    /** Fired when tooltip content changes */\n    this.tooltipChange = new EventEmitter();\n    /** @deprecated - removed, will be added to configuration */\n    this._animation = true;\n    /** @deprecated */\n    this._delay = 0;\n    /** @deprecated */\n    this._fadeDuration = 150;\n    /** @deprecated */\n    this.tooltipStateChanged = new EventEmitter();\n    this._tooltip = cis.createLoader(_elementRef, _viewContainerRef, _renderer).provide({\n      provide: TooltipConfig,\n      useValue: config\n    });\n    Object.assign(this, config);\n    this.onShown = this._tooltip.onShown;\n    this.onHidden = this._tooltip.onHidden;\n  }\n  Object.defineProperty(TooltipDirective.prototype, \"isOpen\", {\n    /**\n     * Returns whether or not the tooltip is currently being shown\n     */\n    get: function () {\n      return this._tooltip.isShown;\n    },\n    set: function (value) {\n      if (value) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TooltipDirective.prototype, \"htmlContent\", {\n    /* tslint:disable */\n    /** @deprecated - please use `tooltip` instead */\n    set: function (value) {\n      console.warn('tooltipHtml was deprecated, please use `tooltip` instead');\n      this.tooltip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TooltipDirective.prototype, \"_placement\", {\n    /** @deprecated - please use `placement` instead */\n    set: function (value) {\n      console.warn('tooltipPlacement was deprecated, please use `placement` instead');\n      this.placement = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TooltipDirective.prototype, \"_isOpen\", {\n    get: function () {\n      console.warn('tooltipIsOpen was deprecated, please use `isOpen` instead');\n      return this.isOpen;\n    },\n    /** @deprecated - please use `isOpen` instead*/\n    set: function (value) {\n      console.warn('tooltipIsOpen was deprecated, please use `isOpen` instead');\n      this.isOpen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TooltipDirective.prototype, \"_enable\", {\n    get: function () {\n      console.warn('tooltipEnable was deprecated, please use `isDisabled` instead');\n      return this.isDisabled === true;\n    },\n    /** @deprecated - please use `isDisabled` instead */\n    set: function (value) {\n      console.warn('tooltipEnable was deprecated, please use `isDisabled` instead');\n      this.isDisabled = value === true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TooltipDirective.prototype, \"_appendToBody\", {\n    get: function () {\n      console.warn('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n      return this.container === 'body';\n    },\n    /** @deprecated - please use `container=\"body\"` instead */\n    set: function (value) {\n      console.warn('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n      this.container = value ? 'body' : this.container;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TooltipDirective.prototype, \"_popupClass\", {\n    /** @deprecated - will replaced with customClass */\n    set: function (value) {\n      console.warn('tooltipClass deprecated');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TooltipDirective.prototype, \"_tooltipContext\", {\n    /** @deprecated - removed */\n    set: function (value) {\n      console.warn('tooltipContext deprecated');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TooltipDirective.prototype, \"_tooltipTrigger\", {\n    /** @deprecated -  please use `triggers` instead */\n    get: function () {\n      console.warn('tooltipTrigger was deprecated, please use `triggers` instead');\n      return this.triggers;\n    },\n    set: function (value) {\n      console.warn('tooltipTrigger was deprecated, please use `triggers` instead');\n      this.triggers = (value || '').toString();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  ;\n  TooltipDirective.prototype.ngOnInit = function () {\n    var _this = this;\n    this._tooltip.listen({\n      triggers: this.triggers,\n      show: function () {\n        return _this.show();\n      }\n    });\n    this.tooltipChange.subscribe(function (value) {\n      if (!value) {\n        _this._tooltip.hide();\n      }\n    });\n  };\n  /**\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  TooltipDirective.prototype.toggle = function () {\n    if (this.isOpen) {\n      return this.hide();\n    }\n    this.show();\n  };\n  /**\n   * Opens an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  TooltipDirective.prototype.show = function () {\n    var _this = this;\n    if (this.isOpen || this.isDisabled || this._delayTimeoutId || !this.tooltip) {\n      return;\n    }\n    var showTooltip = function () {\n      return _this._tooltip.attach(TooltipContainerComponent).to(_this.container).position({\n        attachment: _this.placement\n      }).show({\n        content: _this.tooltip,\n        placement: _this.placement\n      });\n    };\n    if (this._delay) {\n      this._delayTimeoutId = setTimeout(function () {\n        showTooltip();\n      }, this._delay);\n    } else {\n      showTooltip();\n    }\n  };\n  /**\n   * Closes an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  TooltipDirective.prototype.hide = function () {\n    var _this = this;\n    if (this._delayTimeoutId) {\n      clearTimeout(this._delayTimeoutId);\n      this._delayTimeoutId = undefined;\n    }\n    if (!this._tooltip.isShown) {\n      return;\n    }\n    this._tooltip.instance.classMap.in = false;\n    setTimeout(function () {\n      _this._tooltip.hide();\n    }, this._fadeDuration);\n  };\n  TooltipDirective.prototype.ngOnDestroy = function () {\n    this._tooltip.dispose();\n  };\n  TooltipDirective.decorators = [{\n    type: Directive,\n    args: [{\n      selector: '[tooltip], [tooltipHtml]',\n      exportAs: 'bs-tooltip'\n    }]\n  }];\n  /** @nocollapse */\n  TooltipDirective.ctorParameters = function () {\n    return [{\n      type: ViewContainerRef\n    }, {\n      type: Renderer\n    }, {\n      type: ElementRef\n    }, {\n      type: ComponentLoaderFactory\n    }, {\n      type: TooltipConfig\n    }];\n  };\n  TooltipDirective.propDecorators = {\n    'tooltip': [{\n      type: Input\n    }],\n    'tooltipChange': [{\n      type: Output\n    }],\n    'placement': [{\n      type: Input\n    }],\n    'triggers': [{\n      type: Input\n    }],\n    'container': [{\n      type: Input\n    }],\n    'isOpen': [{\n      type: Input\n    }],\n    'isDisabled': [{\n      type: Input\n    }],\n    'onShown': [{\n      type: Output\n    }],\n    'onHidden': [{\n      type: Output\n    }],\n    'htmlContent': [{\n      type: Input,\n      args: ['tooltipHtml']\n    }],\n    '_placement': [{\n      type: Input,\n      args: ['tooltipPlacement']\n    }],\n    '_isOpen': [{\n      type: Input,\n      args: ['tooltipIsOpen']\n    }],\n    '_enable': [{\n      type: Input,\n      args: ['tooltipEnable']\n    }],\n    '_appendToBody': [{\n      type: Input,\n      args: ['tooltipAppendToBody']\n    }],\n    '_animation': [{\n      type: Input,\n      args: ['tooltipAnimation']\n    }],\n    '_popupClass': [{\n      type: Input,\n      args: ['tooltipClass']\n    }],\n    '_tooltipContext': [{\n      type: Input,\n      args: ['tooltipContext']\n    }],\n    '_delay': [{\n      type: Input,\n      args: ['tooltipPopupDelay']\n    }],\n    '_fadeDuration': [{\n      type: Input,\n      args: ['tooltipFadeDuration']\n    }],\n    '_tooltipTrigger': [{\n      type: Input,\n      args: ['tooltipTrigger']\n    }],\n    'tooltipStateChanged': [{\n      type: Output\n    }]\n  };\n  __decorate([OnChange(), __metadata('design:type', Object)], TooltipDirective.prototype, \"tooltip\", void 0);\n  return TooltipDirective;\n}();\n//# sourceMappingURL=tooltip.directive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}