{"ast":null,"code":"import { Directive, HostBinding, Input } from '@angular/core';\n// todo: progress element conflict with bootstrap.css\n// todo: need hack: replace host element with div\nexport var ProgressDirective = function () {\n  function ProgressDirective() {\n    this.addClass = true;\n    this.bars = [];\n    this._max = 100;\n  }\n  Object.defineProperty(ProgressDirective.prototype, \"max\", {\n    /** maximum total value of progress element */\n    get: function () {\n      return this._max;\n    },\n    set: function (v) {\n      this._max = v;\n      this.bars.forEach(function (bar) {\n        bar.recalculatePercentage();\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ProgressDirective.prototype.addBar = function (bar) {\n    if (!this.animate) {\n      bar.transition = 'none';\n    }\n    this.bars.push(bar);\n  };\n  ProgressDirective.prototype.removeBar = function (bar) {\n    this.bars.splice(this.bars.indexOf(bar), 1);\n  };\n  ProgressDirective.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'bs-progress, [progress]'\n    }]\n  }];\n  /** @nocollapse */\n  ProgressDirective.ctorParameters = function () {\n    return [];\n  };\n  ProgressDirective.propDecorators = {\n    'animate': [{\n      type: Input\n    }],\n    'max': [{\n      type: HostBinding,\n      args: ['attr.max']\n    }, {\n      type: Input\n    }],\n    'addClass': [{\n      type: HostBinding,\n      args: ['class.progress']\n    }]\n  };\n  return ProgressDirective;\n}();\n//# sourceMappingURL=progress.directive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}