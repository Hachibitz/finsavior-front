{"ast":null,"code":"import { Directive, ElementRef, Input, Output, Renderer, ViewContainerRef } from '@angular/core';\nimport 'rxjs/add/operator/filter';\nimport { ComponentLoaderFactory } from '../component-loader';\nimport { BsDropdownConfig } from './bs-dropdown.config';\nimport { BsDropdownContainerComponent } from './bs-dropdown-container.component';\nimport { BsDropdownState } from './bs-dropdown.state';\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\nexport var BsDropdownDirective = function () {\n  function BsDropdownDirective(_elementRef, _renderer, _viewContainerRef, _cis, _config, _state) {\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._viewContainerRef = _viewContainerRef;\n    this._cis = _cis;\n    this._config = _config;\n    this._state = _state;\n    // todo: move to component loader\n    this._isInlineOpen = false;\n    this._subscriptions = [];\n    // create dropdown component loader\n    this._dropdown = this._cis.createLoader(this._elementRef, this._viewContainerRef, this._renderer).provide({\n      provide: BsDropdownState,\n      useValue: this._state\n    });\n    this.onShown = this._dropdown.onShown;\n    this.onHidden = this._dropdown.onHidden;\n    // set initial dropdown state from config\n    this._state.autoClose = this._config.autoClose;\n  }\n  Object.defineProperty(BsDropdownDirective.prototype, \"autoClose\", {\n    get: function () {\n      return this._state.autoClose;\n    },\n    /**\n     * Indicates that dropdown will be closed on item or document click,\n     * and after pressing ESC\n     */\n    set: function (value) {\n      if (typeof value === 'boolean') {\n        this._state.autoClose = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(BsDropdownDirective.prototype, \"isDisabled\", {\n    get: function () {\n      return this._isDisabled;\n    },\n    /**\n     * Disables dropdown toggle and hides dropdown menu if opened\n     */\n    set: function (value) {\n      this._isDisabled = value;\n      this._state.isDisabledChange.emit(value);\n      if (value) {\n        this.hide();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BsDropdownDirective.prototype, \"isOpen\", {\n    /**\n     * Returns whether or not the popover is currently being shown\n     */\n    get: function () {\n      if (this._showInline) {\n        return this._isInlineOpen;\n      }\n      return this._dropdown.isShown;\n    },\n    set: function (value) {\n      if (value) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BsDropdownDirective.prototype, \"isBs4\", {\n    get: function () {\n      return !isBs3();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BsDropdownDirective.prototype.ngOnInit = function () {\n    var _this = this;\n    this._showInline = !this.container;\n    // attach DOM listeners\n    this._dropdown.listen({\n      triggers: this.triggers,\n      show: function () {\n        return _this.show();\n      }\n    });\n    // toggle visibility on toggle element click\n    this._subscriptions.push(this._state.toggleClick.subscribe(function (value) {\n      return _this.toggle(value);\n    }));\n    // hide dropdown if set disabled while opened\n    this._subscriptions.push(this._state.isDisabledChange.filter(function (value) {\n      return value === true;\n    }).subscribe(function (value) {\n      return _this.hide();\n    }));\n    // attach dropdown menu inside of dropdown\n    if (this._showInline) {\n      this._state.dropdownMenu.then(function (dropdownMenu) {\n        _this._inlinedMenu = dropdownMenu.viewContainer.createEmbeddedView(dropdownMenu.templateRef);\n      });\n    }\n  };\n  /**\n   * Opens an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  BsDropdownDirective.prototype.show = function () {\n    var _this = this;\n    if (this.isOpen || this.isDisabled) {\n      return;\n    }\n    if (this._showInline) {\n      this._isInlineOpen = true;\n      this._state.isOpenChange.emit(true);\n      return;\n    }\n    this._state.dropdownMenu.then(function (dropdownMenu) {\n      // check direction in which dropdown should be opened\n      var _dropup = _this.dropup === true || typeof _this.dropup !== 'undefined' && _this.dropup !== false;\n      _this._state.direction = _dropup ? 'up' : 'down';\n      var _placement = _this.placement || (_dropup ? 'top left' : 'bottom left');\n      // show dropdown\n      _this._dropdown.attach(BsDropdownContainerComponent).to(_this.container).position({\n        attachment: _placement\n      }).show({\n        content: dropdownMenu.templateRef,\n        placement: _placement\n      });\n      _this._state.isOpenChange.emit(true);\n    });\n  };\n  /**\n   * Closes an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  BsDropdownDirective.prototype.hide = function () {\n    if (!this.isOpen) {\n      return;\n    }\n    if (this._showInline) {\n      this._isInlineOpen = false;\n    } else {\n      this._dropdown.hide();\n    }\n    this._state.isOpenChange.emit(false);\n  };\n  /**\n   * Toggles an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  BsDropdownDirective.prototype.toggle = function (value) {\n    if (this.isOpen || value === false) {\n      return this.hide();\n    }\n    return this.show();\n  };\n  BsDropdownDirective.prototype.ngOnDestroy = function () {\n    // clean up subscriptions and destroy dropdown\n    for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {\n      var sub = _a[_i];\n      sub.unsubscribe();\n    }\n    this._dropdown.dispose();\n  };\n  BsDropdownDirective.decorators = [{\n    type: Directive,\n    args: [{\n      selector: '[bsDropdown],[dropdown]',\n      exportAs: 'bs-dropdown',\n      providers: [BsDropdownState],\n      host: {\n        '[class.dropup]': 'dropup',\n        '[class.open]': 'isOpen',\n        '[class.show]': 'isOpen && isBs4'\n      }\n    }]\n  }];\n  /** @nocollapse */\n  BsDropdownDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: Renderer\n    }, {\n      type: ViewContainerRef\n    }, {\n      type: ComponentLoaderFactory\n    }, {\n      type: BsDropdownConfig\n    }, {\n      type: BsDropdownState\n    }];\n  };\n  BsDropdownDirective.propDecorators = {\n    'placement': [{\n      type: Input\n    }],\n    'triggers': [{\n      type: Input\n    }],\n    'container': [{\n      type: Input\n    }],\n    'dropup': [{\n      type: Input\n    }],\n    'autoClose': [{\n      type: Input\n    }],\n    'isDisabled': [{\n      type: Input\n    }],\n    'isOpen': [{\n      type: Input\n    }],\n    'onShown': [{\n      type: Output\n    }],\n    'onHidden': [{\n      type: Output\n    }]\n  };\n  return BsDropdownDirective;\n}();\n//# sourceMappingURL=bs-dropdown.directive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}