{"ast":null,"code":"import { Directive, Input, Output, Renderer, ElementRef, ViewContainerRef } from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { ComponentLoaderFactory } from '../component-loader';\nimport { PopoverContainerComponent } from './popover-container.component';\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\nexport var PopoverDirective = function () {\n  function PopoverDirective(_elementRef, _renderer, _viewContainerRef, _config, cis) {\n    this._popover = cis.createLoader(_elementRef, _viewContainerRef, _renderer).provide({\n      provide: PopoverConfig,\n      useValue: _config\n    });\n    Object.assign(this, _config);\n    this.onShown = this._popover.onShown;\n    this.onHidden = this._popover.onHidden;\n  }\n  Object.defineProperty(PopoverDirective.prototype, \"isOpen\", {\n    /**\n     * Returns whether or not the popover is currently being shown\n     */\n    get: function () {\n      return this._popover.isShown;\n    },\n    set: function (value) {\n      if (value) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Opens an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  PopoverDirective.prototype.show = function () {\n    if (this._popover.isShown) {\n      return;\n    }\n    this._popover.attach(PopoverContainerComponent).to(this.container).position({\n      attachment: this.placement\n    }).show({\n      content: this.popover,\n      placement: this.placement,\n      title: this.popoverTitle\n    });\n    this.isOpen = true;\n  };\n  /**\n   * Closes an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  PopoverDirective.prototype.hide = function () {\n    if (this.isOpen) {\n      this._popover.hide();\n      this.isOpen = false;\n    }\n  };\n  /**\n   * Toggles an element’s popover. This is considered a “manual” triggering of\n   * the popover.\n   */\n  PopoverDirective.prototype.toggle = function () {\n    if (this.isOpen) {\n      return this.hide();\n    }\n    this.show();\n  };\n  PopoverDirective.prototype.ngOnInit = function () {\n    var _this = this;\n    this._popover.listen({\n      triggers: this.triggers,\n      show: function () {\n        return _this.show();\n      }\n    });\n  };\n  PopoverDirective.prototype.ngOnDestroy = function () {\n    this._popover.dispose();\n  };\n  PopoverDirective.decorators = [{\n    type: Directive,\n    args: [{\n      selector: '[popover]',\n      exportAs: 'bs-popover'\n    }]\n  }];\n  /** @nocollapse */\n  PopoverDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: Renderer\n    }, {\n      type: ViewContainerRef\n    }, {\n      type: PopoverConfig\n    }, {\n      type: ComponentLoaderFactory\n    }];\n  };\n  PopoverDirective.propDecorators = {\n    'popover': [{\n      type: Input\n    }],\n    'popoverTitle': [{\n      type: Input\n    }],\n    'placement': [{\n      type: Input\n    }],\n    'triggers': [{\n      type: Input\n    }],\n    'container': [{\n      type: Input\n    }],\n    'isOpen': [{\n      type: Input\n    }],\n    'onShown': [{\n      type: Output\n    }],\n    'onHidden': [{\n      type: Output\n    }]\n  };\n  return PopoverDirective;\n}();\n//# sourceMappingURL=popover.directive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}