{"ast":null,"code":"import { Directive, HostBinding, HostListener, Input, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport var CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return ButtonCheckboxDirective;\n  }),\n  multi: true\n};\n/**\n * Add checkbox functionality to any element\n */\nexport var ButtonCheckboxDirective = function () {\n  function ButtonCheckboxDirective() {\n    /** Truthy value, will be set to ngModel */\n    this.btnCheckboxTrue = true;\n    /** Falsy value, will be set to ngModel */\n    this.btnCheckboxFalse = false;\n    this.state = false;\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n  }\n  // view -> model\n  ButtonCheckboxDirective.prototype.onClick = function () {\n    if (this.isDisabled) {\n      return;\n    }\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  };\n  ButtonCheckboxDirective.prototype.ngOnInit = function () {\n    this.toggle(this.trueValue === this.value);\n  };\n  Object.defineProperty(ButtonCheckboxDirective.prototype, \"trueValue\", {\n    get: function () {\n      return typeof this.btnCheckboxTrue !== 'undefined' ? this.btnCheckboxTrue : true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ButtonCheckboxDirective.prototype, \"falseValue\", {\n    get: function () {\n      return typeof this.btnCheckboxFalse !== 'undefined' ? this.btnCheckboxFalse : false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ButtonCheckboxDirective.prototype.toggle = function (state) {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  };\n  // ControlValueAccessor\n  // model -> view\n  ButtonCheckboxDirective.prototype.writeValue = function (value) {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  };\n  ButtonCheckboxDirective.prototype.setDisabledState = function (isDisabled) {\n    this.isDisabled = isDisabled;\n  };\n  ButtonCheckboxDirective.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n  ButtonCheckboxDirective.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n  ButtonCheckboxDirective.decorators = [{\n    type: Directive,\n    args: [{\n      selector: '[btnCheckbox]',\n      providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n    }]\n  }];\n  /** @nocollapse */\n  ButtonCheckboxDirective.ctorParameters = function () {\n    return [];\n  };\n  ButtonCheckboxDirective.propDecorators = {\n    'btnCheckboxTrue': [{\n      type: Input\n    }],\n    'btnCheckboxFalse': [{\n      type: Input\n    }],\n    'state': [{\n      type: HostBinding,\n      args: ['class.active']\n    }],\n    'onClick': [{\n      type: HostListener,\n      args: ['click']\n    }]\n  };\n  return ButtonCheckboxDirective;\n}();\n//# sourceMappingURL=button-checkbox.directive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}